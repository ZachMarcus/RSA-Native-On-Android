
#define __CL_ENABLE_EXCEPTIONS
#define CL_USE_DEPRECATED_OPENCL_1_1_APIS

#include <jni.h>

#include "crypto.h"

void cMain(int numberOfTimes, int c_d, int c_n, int c_key);
void clMain(int numberOfTimes);
void GMPmain(int numberOfTimes);

extern "C" {

    JNIEXPORT jstring JNICALL
         Java_com_sidechannel_rsa_openssl_MainActivity_RSAFromJNI( JNIEnv* env,
                                                                   jobject thiz,
																   jboolean rsaChoice,
																   jboolean rsaOpenCLChoice,
																   jboolean runRSAGMPChoice,
																   jint numberOfTimes) {
         #if defined(__arm__)
             #if defined(__ARM_ARCH_7A__)
               #if defined(__ARM_NEON__)
                 #if defined(__ARM_PCS_VFP)
                   #define ABI "armeabi-v7a/NEON (hard-float)"
                 #else
                   #define ABI "armeabi-v7a/NEON"
                 #endif
               #else
                 #if defined(__ARM_PCS_VFP)
                   #define ABI "armeabi-v7a (hard-float)"
                 #else
                   #define ABI "armeabi-v7a"
                 #endif
               #endif
             #else
              #define ABI "armeabi"
             #endif
         #elif defined(__i386__)
             #define ABI "x86"
         #elif defined(__x86_64__)
             #define ABI "x86_64"
         #elif defined(__mips64)  // mips64el-* toolchain defines __mips__ too
             #define ABI "mips64"
         #elif defined(__mips__)
             #define ABI "mips"
         #elif defined(__aarch64__)
         #define ABI "arm64-v8a"
         #else
             #define ABI "unknown"
         #endif

    	if((rsaChoice && rsaOpenCLChoice) || (rsaChoice && runRSAGMPChoice) || (rsaOpenCLChoice && runRSAGMPChoice)) {
    		return env->NewStringUTF("You can only choose one");
    	}
    	else if(!(rsaChoice || rsaOpenCLChoice || runRSAGMPChoice)) {
    		return env->NewStringUTF("You have to choose one");
    	}
    	else if(rsaChoice) {
            cMain(numberOfTimes, 83, 59, 954);
    		return env->NewStringUTF("You ran RSA, compiled with " ABI ".");
    	}
    	else if(rsaOpenCLChoice) {
    		clMain(numberOfTimes);
    		return env->NewStringUTF("You ran RSA with OpenCL, compiled with " ABI ".");
    	}
    	else if(runRSAGMPChoice) {
    		GMPmain(numberOfTimes);
    		return env->NewStringUTF("You ran RSAGMP!");
    	}
    	else {
    		return env->NewStringUTF("Something is broken somewhere");
    	}
    }
}


void GMPmain(int numberOfTimes) {
	uint64_t diff;
	struct timespec start, end;

	/*std::string eString
	uint8_t eStringArray[eString.length()];
	for(int i = 0; i < eString.length(); i++) {
		eStringArray[i] = eString[i] - '0';
	}
	mpz_t eStringProper;
	mpz_init(eStringProper);
	mpz_import(eStringProper, sizeof(eStringArray), 1, sizeof(eStringArray[0]), 0, 0, eStringArray);*/

	/*std::string nString
	uint8_t nStringArray[nString.length()];
	for(int i = 0; i < nString.length(); i++) {
		nStringArray[i] = nString[i] - '0';
	}
	mpz_t nStringProper;
	mpz_init(nStringProper);
	mpz_import(nStringProper, sizeof(nStringArray), 1, sizeof(nStringArray[0]), 0, 0, nStringArray);*/


	//const std::string eString = "29";
	//const std::string nString = "16637";
	//mpz_class e(eString, 10);
	//mpz_class n(nString, 10);

	//mpz_class e(eStringProper);
	//mpz_class n(nStringProper);


	//std::string eString
	//std::string nString
	//mpz_class e(eString, 2);
	//mpz_class n(nString, 2);
	mpz_class e("5592256007473496758", 10);
	mpz_class n("6322884582875415035", 10);



	char *dataString = new char[64];
	static const char numChars[] = "0123456789";
	std::string dataStringProper;

	FILE *file = fopen("/sdcard/RSA/GMPMainOutput.txt", "w");
	fprintf(file, "Running RSA with GMP on C\n");
	gmp_fprintf(file, "e = %Zd\n", e.get_mpz_t());
	gmp_fprintf(file, "n = %Zd\n", n.get_mpz_t());
	fprintf(file, "The data should go time in nanoseconds, a tab, then the message to be encrypted.\n");
	fclose(file);

	for(int timesCompleted = 0; timesCompleted < numberOfTimes; timesCompleted++) {
		for (int i = 0; i < 64; i++) {
					dataString[i] = numChars[rand() % (sizeof(numChars) - 1)];
		}
		dataStringProper = dataString;
		mpz_class data(dataStringProper, 10);
		char * cstrDataStringProper = new char [dataStringProper.length() + 1];
		std::strcpy(cstrDataStringProper, dataStringProper.c_str());

		clock_gettime(CLOCK_MONOTONIC, &start);
		GMPmod(data, e, n);
		clock_gettime(CLOCK_MONOTONIC, &end);
		diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;

		file = fopen("/sdcard/RSA/GMPMainOutput.txt", "a");
		fprintf(file, "%llu\t", (long long unsigned int) diff);
		fprintf(file, "%s\n", cstrDataStringProper);
		fclose(file);

	}

	return;
}

void GMPmod(mpz_class base, mpz_class exponent, mpz_class den) {
	mpz_class a, zbase, zden, ret;
	mpf_class size;
	zbase = base;
	zden = den; // convert to int
	a = (zbase%zden);
	a = a * a;
	size = exponent/2.0;
	if(exponent==0) {
		ret = zbase % zden;
	}
	else {
		while(1) {
			if(size>0.5f) {
				ret = (ret * a)%zden;
				size = size - 1.0f;
	        }
	        else if (size == 0.5f) {
	        	ret = zbase % zden;
	        	ret = ret * ret;
	        	ret = ret % zden;
	        	break;
	        }
	        else break;
	   }
	}
}


void cMod(int c_base, int c_exponent, int c_den)
{
	unsigned int c_a = (c_base % c_den) * (c_base % c_den);
	unsigned long int c_ret = 1;
	float c_size = (float)c_exponent / 2;

	if(c_exponent == 0) {
		c_ret = c_base % c_den;
	}
	else {

		while(1) {
			if(c_size>0.5f) {
				c_ret=(c_ret*c_a)%c_den;
				c_size=c_size-1.0f;
			}
			else if(c_size==0.5f) {
				c_ret=(c_ret*(c_base%c_den))%c_den;
				break;
			}
			else break;
		}
	}

}

void cMain(int numberOfTimes, int c_d, int c_n, int c_key) {
	uint64_t c_diff;
	struct timespec c_start, c_end;
	int completedTimes;
	FILE *file = fopen("sdcard/RSA/cMainOutput.txt", "w");
	fprintf(file, "Running RSA with C\n");
	//fclose(file);
	for(completedTimes = 0; completedTimes < numberOfTimes; completedTimes++) {
	    clock_gettime(CLOCK_MONOTONIC, &c_start);
	    cMod(c_d, c_n, c_key);
	    clock_gettime(CLOCK_MONOTONIC, &c_end);
	    c_diff = BILLION * (c_end.tv_sec - c_start.tv_sec) + c_end.tv_nsec - c_start.tv_nsec;
	    fprintf(file, "Time taken: %llu\n", (long long unsigned int) c_diff);
	}
	fclose(file);
	//printf("%llu", (long long unsigned int) c_diff);
    //return (long long unsigned int) c_diff;

}
/*
void cMain(int c_argc, char *c_argv[]) {
	int c_e = strtol(c_argv[1],NULL,0);
	int c_n = strtol(c_argv[2],NULL,0);
	int c_data = strtol(c_argv[3],NULL,2);

	uint64_t c_diff;
	struct timespec c_start, c_end;

	clock_gettime(CLOCK_MONOTONIC, &c_start);
	cMod(c_data, c_e, c_n);
	clock_gettime(CLOCK_MONOTONIC, &c_end);

	c_diff = BILLION * (c_end.tv_sec - c_start.tv_sec) + c_end.tv_nsec - c_start.tv_nsec;
	//printf("%llu", (long long unsigned int) c_diff);

}*/




// DECLARE GLOBALLY
int length =512;
int * buf;
int *dev_key,*dev_den;
//DECLARATION FOR e,d and n

long int p,q,n,t,flag,e[100],d[100],temp[100],j,m[100],en[100],i;
char msg[100];


//Continually increments k by t, until k is divisible by x.
//Returns the result of this division.
long int cd(long int x) {
    long int k=1;
    while(1) {
        k=k+t;
        if(k%x==0) {
            return(k/x);
        }
    }
}

//determines if the given number is prime.
//Returns 0 if not, 1 if so.
int prime(long int pr) {
    j=sqrt((double)pr);
    for(int i=2;i<=j;i++) {
        if(pr%i==0) {
            return 0;
        }
    }
    return 1;
}



void ce() {
    int k = 0;
    for(i=2;i<t;i++) {
        if(t % i == 0) {
            //nothing
        }
        else {
            flag=prime(i);
            if(flag==1&&i!=p&&i!=q) {
                e[k]=i;
                flag= cd(e[k]);

                if(flag>0) {
                    d[k]=flag;
                    k++;
                }
                if(k==99) {
                    break;
                }
            }
        }
    }
}


//Implementation of GetTickCount() for Linux systems.
//This code was originally written in Windows and this function is usually available in the
//windows.h include file
#include <sys/time.h>
long GetTickCount() {
	struct timeval tv;
	if (gettimeofday(&tv, NULL) != 0) {
		return 0;
	}
	return (tv.tv_sec * 1000) + (tv.tv_usec / 1000);
}

//MAIN STARTS

void clMain(int numberOfTimes) {

    //declaring variables to be used for timing, usage of OpenCL, etc.
    char build_c[4096];

    uint64_t diff;
    struct timespec start, end;

    cl_int error;
    cl_platform_id platform;
    cl_device_id device;
    cl_uint platforms, devices;
    size_t srcsize,worksize=length*sizeof(int);
    int i;
    int key=5;
    int den=7;
    dev_key= &key;
    dev_den= &den;
    int length1=800;

    // seed random number generator
    srand(GetTickCount());
    buf = (int*)malloc(worksize);
    for ( i = 0; i < length; i++ ) {
        buf [i] = rand ( )%length1;
    }

    // Fetch the Platform and Device IDs; we only want one.
    error=clGetPlatformIDs(1, &platform, &platforms);
    if (error != CL_SUCCESS) {
            printf("\n Error number %d", error);
    }
    error=clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 1, &device, &devices);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    //calculating e and d
    //printf("\nENTER FIRST PRIME NUMBER\n");
    //scanf("%ld",&p);
    p = 59;
    flag=prime(p);
    if(flag==0) {
        printf("\nWRONG INPUT\n");
        exit(1);
    }
    //printf("\nENTER ANOTHER PRIME NUMBER\n");
    //scanf("%ld",&q);
    q = 83;
    flag=prime(q);
    if(flag==0||p==q) {
        printf("\nWRONG INPUT\n");
        exit(1);
    }
    //fflush(stdin);
    n=p*q;
    t=(p-1)*(q-1); // t = phi(n)

    ce();

    //printf("\nPOSSIBLE VALUES OF e AND d AND n ARE\n");
    for(i = 0; i < (j - 1); i++) {
        //printf("\n%ld\t%ld \t%d",e[i],d[i],(int)n);
        key = e[i];
        den = d[i];
    }

    // ENTER KEY VALUE
    //printf("\nEnter key parameter e from above set of values 1:");
    //scanf("%d",dev_key);
    //Should this be key parameter n from set of values 3,
    // or key parameter d from set of values 2?
    //Looks like parameter d makes more sense.
    //printf("\nEnter key parameter n from above set of values 2:");
    //scanf("%d",dev_den);


    //clock_gettime(CLOCK_MONOTONIC, &start);/* mark start time */


    // CREATE CONTEXT
    cl_context context=clCreateContext(0, 1, &device, NULL, NULL, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    //CREATE COMMAND QUEUE
    cl_command_queue cq = clCreateCommandQueue(context, device, 0, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    /*//CREATE FILE
    fflush(stdout);
    FILE *fil=fopen("/data/local/tmp/rsa.cl","r");
    if (fil == NULL) {
    	printf("Error, could not open the kernel.");
        fclose(fil);
        return -1;
    }*/

    //CREATE FILE
    fflush(stdout);
    FILE *fil;
    fil = fopen("/sdcard/RSA/rsa.cl", "r");
    char *src;
    src = (char *)malloc(MAX_SOURCE_SIZE);
    srcsize=fread(src, 1, MAX_SOURCE_SIZE, fil);
    fclose(fil);
    const char *srcptr[]={src};

    // Submit the source code of the example kernel to OpenCL
    cl_program prog=clCreateProgramWithSource(context, 1, srcptr, &srcsize, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    // and compile it (after this we could extract the compiled version)
    error=clBuildProgram(prog, 1, &device, NULL, NULL, NULL);
    if ( error != CL_SUCCESS ) {
        printf( "Error on buildProgram " );
        printf("\n Error number %d", error);
        fprintf( stdout, "\nRequestingInfo\n" );
        clGetProgramBuildInfo( prog, device, CL_PROGRAM_BUILD_LOG, 4096, build_c, NULL );
        printf( "Build Log for %s_program:\n%s\n", "example",build_c );
    }

    // Allocate memory for the kernel to work with
    cl_mem mem1, mem2, mem3,mem4;
    mem1=clCreateBuffer(context, CL_MEM_READ_WRITE, worksize, NULL, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    mem2=clCreateBuffer(context, CL_MEM_READ_WRITE, worksize, NULL, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    mem3=clCreateBuffer(context,  CL_MEM_READ_WRITE, worksize, NULL, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    mem4=clCreateBuffer(context,  CL_MEM_READ_WRITE, worksize, NULL, &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    // get a handle and map parameters for the kernel
    cl_kernel k_example=clCreateKernel(prog, "RSA", &error);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error = clSetKernelArg(k_example, 0, sizeof(mem1), &mem1);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error = clSetKernelArg(k_example, 1, sizeof(mem2), &mem2);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error = clSetKernelArg(k_example, 2, sizeof(mem3), &mem3);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error = clSetKernelArg(k_example, 3, sizeof(mem4), &mem4);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    // Target buffer just so we show we got the data from OpenCL
    int buf2[262144];

    // Send input data to OpenCL (async, don't alter the buffer!)
    error=clEnqueueWriteBuffer(cq, mem1, CL_FALSE, 0, worksize, buf, 0, NULL, NULL);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error=clEnqueueWriteBuffer(cq, mem2, CL_FALSE, 0, worksize, dev_key, 0, NULL, NULL);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }
    error=clEnqueueWriteBuffer(cq, mem3, CL_FALSE, 0, worksize, dev_den, 0, NULL, NULL);
    if (error != CL_SUCCESS) {
        printf("\n Error number %d", error);
    }

    // Perform the operation
    const size_t global_worksize=length;


    int timesCompleted;
    fil = fopen("/sdcard/RSA/clMainOutput.txt", "w");
    for(timesCompleted = 0; timesCompleted < numberOfTimes; timesCompleted++) {
		clock_gettime(CLOCK_MONOTONIC, &start);/* mark start time */

		error=clEnqueueNDRangeKernel(cq, k_example, 1, NULL, &global_worksize, NULL, 0, NULL, NULL);
		if (error != CL_SUCCESS) {
			printf("\n Error number %d", error);
		}

		// Read the result back into buf2
		error=clEnqueueReadBuffer(cq, mem4, CL_FALSE, 0, worksize, buf2, 0, NULL, NULL);
		if (error != CL_SUCCESS) {
			printf("\n Error number %d", error);
		}

		// Await completion of all the above
		error=clFinish(cq);
		if (error != CL_SUCCESS) {
			printf("\n Error number %d", error);
		}

		// STOP CLOCK
		clock_gettime(CLOCK_MONOTONIC, &end);/* mark the end time */


		diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
		//printf("\nElapsed time = %llu nanoseconds\n", (long long unsigned int) diff);
		fprintf(fil, "Elapsed time = %llu nanoseconds\n", (long long unsigned int) diff);
    }
    fclose(fil);

    //I'm not happy with either of these measurements for time yet, I'll be adding in
    // usage of clProfilingInfo

}





















































